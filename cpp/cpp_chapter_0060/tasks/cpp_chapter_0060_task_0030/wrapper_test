#include "ut.hpp"
#include <format>

#INJECT-b585472fa

int main()
{
    using namespace boost::ut;

    "find_last() must return end()"_test = [] {
        std::string empty_s = "";
        expect(find_last(empty_s, 'a') == empty_s.end()) << "find_last(s, 'a') where s is empty must return s.end()" << fatal;

        std::string s = "test";
        expect(find_last(s, 'a') == s.end()) << "find_last(s, 'a') where s=\"test\" must return s.end()" << fatal;
    };


    "find_last() must return iterator to character"_test = [] {
        std::string s = "latest";
        std::vector<std::pair<char, std::string::iterator>> cases {
            {'t', s.begin() + 5},
            {'s', s.begin() + 4},
            {'e', s.begin() + 3},
            {'l', s.begin()},
        };

        for (auto & [c, it_plan] : cases)
        {
            auto it_fact = find_last(s, c);
            const std::string res = std::format("it points to {}", 
            it_fact == s.end() ? "s.end()" : std::to_string(std::distance(s.begin(), it_fact)));

            expect(it_fact == it_plan) << std::format("find_last(s, '{}') where s=\"latest\" must return iteartor pointing to character with index {} but {}", 
            c, std::distance(s.begin(), it_plan), res) << fatal;
        }
    };


}
