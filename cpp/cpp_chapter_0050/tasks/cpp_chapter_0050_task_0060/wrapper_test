#include "ut.hpp"
#include "test_helpers.h"

std::time_t fake_cur_time = 0;

std::time_t get_cur_time()
{
    return fake_cur_time;
}

#INJECT-b585472fa

int main()
{
    using namespace boost::ut;

    "No action"_test = [] {
        fake_cur_time = 0;
        Device d;
        expect(!d.is_active());
        expect(d.uptime() == 0);
    };

    "Turn on - off"_test = [] {
        fake_cur_time = 0;
        Device d;
        d.start();
        expect(d.is_active());
        d.stop();
        expect(!d.is_active());
    };

    "Uptime"_test = [] {
        fake_cur_time = 1;
        Device d;
        d.start();
        fake_cur_time = 11;
        expect(d.uptime() == 11 - 1);

        fake_cur_time = 15;
        expect(d.uptime() == 15 - 1);
    };

    "Healthcheck throws"_test = [] {
        fake_cur_time = 0;
        Device d;
        try
        {
            d.set_latest_healthcheck();
            expect(false);
        }
        catch(const std::logic_error & e)
        {
            // expected scenario
            return;
        }
        expect(false);
    };

    "Healthcheck"_test = [] {
        fake_cur_time = 1;
        Device d;
        d.start();
        d.set_latest_healthcheck();
        fake_cur_time = 2;

        expect(d.is_active());
        fake_cur_time = 30;

        expect(d.is_active());
        fake_cur_time = 70;
        expect(!d.is_active());

        d.set_latest_healthcheck();
        expect(d.is_active());

        d.stop();
        expect(!d.is_active());
    };
}
